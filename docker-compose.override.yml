services:
  redis:
    container_name: aqt-redis-stack
    image: 'redis/redis-stack:latest'
    restart: unless-stopped
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_PASSWORD?Variable not set}"
    volumes:
      - redis-data:/data
    networks:
      - default

  traeifk:
    image: traefik:3.3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    # Duplicate the command from docker-compose.yml to add --api.insecure=true
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
    networks:
      - traefik-public
      - default

  backend:
    image: "registry.craazzzyyfoxx.me/aqt-backend:latest"
    container_name: aqt-backend
    build:
      context: ./backend
      args:
        APP_PATH: app
    develop:
      watch:
        - path: ./backend/app
          action: sync
          target: /src
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend-http.rule=PathPrefix(`/api/v1`)
      - traefik.http.routers.backend-http.entrypoints=http
      - traefik.http.services.backend-http.loadbalancer.server.port=8000
    ports:
      - "8082:8000"
    volumes:
      - ./logs/backend:/logs
      # TODO: remove once coverage is done locally
      - ./backend/htmlcov:/app/htmlcov
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --quiet http://0.0.0.0:80/api/v1/utils-health-check || exit 1" ]
      interval: 5s
      timeout: 5s
    networks:
      - default
      - traefik-public

  parser-api:
    image: registry.craazzzyyfoxx.me/aqt-parser:latest
    container_name: aqt-parser
    build:
      context: ./backend
      args:
        APP_PATH: parser
    develop:
      watch:
        - path: ./backend/parser
          action: sync
          target: /src
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.parser-api-http.rule=PathPrefix(`/parser`)
      - traefik.http.routers.parser-api-http.entrypoints=http
      - traefik.http.services.parser-api-http.loadbalancer.server.port=8081
    command: uvicorn main:app --host 0.0.0.0 --port 8081 --loop uvloop
    volumes:
      - ./logs/parser:/logs
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --quiet http://0.0.0.0:80/api/v1/utils-health-check || exit 1" ]
      interval: 5s
      timeout: 5s
    networks:
      - default
      - traefik-public

  worker:
    image: registry.craazzzyyfoxx.me/aqt-parser:latest
    container_name: aqt-worker
    command: celery -A worker.celery worker --beat --loglevel=info
    build:
      context: ./backend
      args:
        APP_PATH: parser
    develop:
      watch:
        - path: ./backend/parser
          action: sync
          target: /src
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    depends_on:
      - redis
    volumes:
      - ./logs/parser:/logs
    networks:
      - default
      - traefik-public

  frontend:
    image: registry.craazzzyyfoxx.me/frontend:latest
    container_name: aqt-frontend
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: prod.Dockerfile
      args:
        NEXT_API_URL: ${NEXT_API_URL}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend-http.rule=PathPrefix(`/`)
      - traefik.http.routers.frontend-http.entrypoints=http
      - traefik.http.services.frontend-http.loadbalancer.server.port=3000
    volumes:
      - ./logs/frontend:/logs
    networks:
      - default
      - traefik-public

volumes:
  redis-data:

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false